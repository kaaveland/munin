"""
Loadable.Loadable subclass
"""

class victim(loadable.loadable):
    def __init__(self,client,conn,cursor):
        loadable.loadable.__init__(self,client,conn,cursor,100)
        self.commandre=re.compile(r"^"+self.__class__.__name__+"(.*)")
        self.paramre=re.compile(r"(\s+(\S+))?(\s+(ter|cat|xan|zik))(\s+(<|>)?(\d+))?(\s+(<|>)?(\d+))?",re.I)
        self.usage=self.__class__.__name__ + " [alliance] <race> [<|>][size] [<|>][value]"
        
    def execute(self,nick,username,host,target,prefix,command,user,access):
        m=self.commandre.search(command)
        if not m:
            return 0
        print "'%s'" %(m.group(1),)
        m=self.paramre.search(m.group(1))
        if not m:
            self.client.reply(prefix,nick,target,"Usage: %s" % (self.usage,))
            return 0

        alliance=m.group(2)
        race=m.group(4)
        size_mod=m.group(6) or '>'
        size=m.group(7)
        value_mod=m.group(9) or '<'
        value=m.group(10) 
        
        # assign param variables
        
        if access < self.level:
            self.client.reply(prefix,nick,target,"You do not have enough access to use this command")
            return 0
        
        if alliance:
            victims=self.victim(alliance,race,size_mod,size,value_mod,value)
            i=0
            if not len(victims):
                reply="No %s planets in intel matching alliance: %s,"%(race,alliance)
                if size:
                    reply+=" size %s %s" % (size_mod,size)
                if value:
                    reply+=" value %s %s" % (value_mod,value)
                self.client.reply(prefix,nick,target,reply)
            for v in victims:
                reply="%s:%s:%s (%s)" % (v['x'],v['y'],v['z'],v['race'])
                reply+=" Value: %s Size: %s" % (v['value'],v['size'])
                if v['nick']:
                    reply+=" Nick: %s" % (v['nick'],)

                i+=1
                if i>4 and len(victims)>4:
                    reply+=" (Too many victims to list, please refine your search)"
                    self.client.reply(prefix,nick,target,reply)
                    break
                self.client.reply(prefix,nick,target,reply)

                
        else:
            self.client.reply(prefix,nick,target,"Usage: %s" % (self.usage,))
            return 0
        
        
        return 1
    
    def victim(self,alliance='ascendancy',race=None,size_mod='>',size=None,value_mod='<',value=None):
        args=('%'+alliance+'%',)
        query="SELECT t1.x AS x,t1.y AS y,t1.z AS z,t1.size AS size,t1.size_rank AS size_rank,t1.value AS value,t1.value_rank AS value_rank,t1.race AS race,t2.alliance AS alliance,t2.nick AS nick"
        query+=" FROM planet_dump AS t1 INNER JOIN planet_canon AS t3 ON t1.id=t3.id"
        query+=" INNER JOIN intel AS t2 ON t3.id=t2.pid"
        query+=" WHERE t1.tick=(SELECT MAX(tick) FROM updates) AND t2.alliance ILIKE %s"

        if race:
            query+=" AND race ILIKE %s"
            args+=(race,)
        if size:
            query+=" AND size %s " % (size_mod) + "%s"
            args+=(size,)
        if value:
            query+=" AND value %s " % (value_mod) + "%s"
            args+=(value,)
        query+=" ORDER BY t1.size DESC, t1.value DESC"
        self.cursor.execute(query,args)
        return self.cursor.dictfetchall()

